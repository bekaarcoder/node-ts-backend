// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SHOP
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
}

enum DiscountType {
  PERCENT
  VALUE
}

model User {
  id                      Int       @id @default(autoincrement())
  email                   String    @unique
  password                String
  firstName               String
  lastName                String
  avatar                  String
  role                    Role      @default(USER)
  isActive                Boolean   @default(true)
  passwordResetCode       String?
  passwordResetExpireDate DateTime?

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Product[]
  wishlists Wishlist[]
  addresses Address[]
  cart      Cart?
  orders    Order[]
  reviews   Review[]

  @@map("users")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  icon     String
  status   Boolean   @default(true)
  products Product[]

  @@map("categories")
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  longDescription  String   @db.LongText
  shortDescription String
  price            Float    @default(0)
  quantity         Int
  mainImage        String
  category         Category @relation(fields: [categoryId], references: [id])
  categoryId       Int

  shop   User? @relation(fields: [shopId], references: [id])
  shopId Int?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  productImages   ProductImages[]
  productVariants ProductVariant[]
  wishlists       Wishlist[]
  cartItems       CartItem[]
  orderItems      OrderItem[]
  reviews         Review[]

  @@map("products")
}

model ProductImages {
  id        Int     @id @default(autoincrement())
  image     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@map("product_images")
}

model ProductVariant {
  id                  Int                  @id @default(autoincrement())
  name                String
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           Int
  productVariantItems ProductVariantItem[]

  @@map("product_variants")
}

model ProductVariantItem {
  id               Int            @id @default(autoincrement())
  name             String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId Int

  @@map("product_variant_items")
}

model Wishlist {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@id([userId, productId])
  @@map("wishlists")
}

model Address {
  id      Int    @id @default(autoincrement())
  street  String
  city    String
  state   String
  country String
  pincode Int

  user   User    @relation(fields: [userId], references: [id])
  userId Int
  orders Order[]

  @@map("address")
}

model Cart {
  id         Int        @id @default(autoincrement())
  userId     Int        @unique
  totalPrice Float
  cartItems  CartItem[]
  user       User       @relation(fields: [userId], references: [id])

  @@map("cart")
}

model CartItem {
  id        Int     @id @default(autoincrement())
  productId Int
  variant   String? @db.Text
  price     Float
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    Int
  product   Product @relation(fields: [productId], references: [id])

  @@map("cart_item")
}

model Order {
  id            Int         @id @default(autoincrement())
  totalPrice    Float
  discountPrice Float       @default(0)
  totalQuantity Int         @default(1)
  status        OrderStatus
  orderItems    OrderItem[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  address       Address     @relation(fields: [addressId], references: [id])
  addressId     Int
  coupon        Coupon?     @relation(fields: [couponCode], references: [code])
  couponCode    String?

  @@map("orders")
}

model OrderItem {
  id       Int     @id @default(autoincrement())
  variant  String? @db.Text
  price    Float
  quantity Int     @default(1)

  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int

  @@map("order_item")
}

model Coupon {
  code          String       @id
  discountPrice Int
  discountType  DiscountType @default(PERCENT)
  isActive      Boolean      @default(true)
  orders        Order[]

  @@map("coupons")
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String   @db.Text
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("reviews")
}

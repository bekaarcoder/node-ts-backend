// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SHOP
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  firstName String
  lastName  String
  avatar    String
  role      Role    @default(USER)
  isActive  Boolean @default(true)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Product[]
  wishlists Wishlist[]

  @@map("users")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  icon     String
  status   Boolean   @default(true)
  products Product[]

  @@map("categories")
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  longDescription  String   @db.LongText
  shortDescription String
  price            Float    @default(0)
  quantity         Int
  mainImage        String
  category         Category @relation(fields: [categoryId], references: [id])
  categoryId       Int

  shop   User? @relation(fields: [shopId], references: [id])
  shopId Int?

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now()) @updatedAt
  productImages   ProductImages[]
  productVariants ProductVariant[]
  wishlists       Wishlist[]

  @@map("products")
}

model ProductImages {
  id        Int     @id @default(autoincrement())
  image     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@map("product_images")
}

model ProductVariant {
  id                  Int                  @id @default(autoincrement())
  name                String
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           Int
  productVariantItems ProductVariantItem[]

  @@map("product_variants")
}

model ProductVariantItem {
  id               Int            @id @default(autoincrement())
  name             String
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productVariantId Int

  @@map("product_variant_items")
}

model Wishlist {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  @@id([userId, productId])
  @@map("wishlists")
}
